name: build

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
    schedule:
        - cron: '0 1 * * *'
env:
    RELEASE_URL: https://api.github.com/repos/${{ github.repository }}/releases
    ARTIFACT_NAME: keycloak-client-authz

# do not think concurrency is needed as long as versioning is done correctly
# wish I knew about actions/github-script before writing this...

jobs:
    check:
        runs-on: ubuntu-latest
        outputs:
            NEEDS_REBUILD: ${{ steps.run-check.outputs.status }}
            KEYCLOAK_VERSION: ${{ steps.keycloak-version-output.outputs.ver }}
            PLUGIN_VERSION: ${{ steps.plugin-version-output.outputs.ver }}
        steps:
            - name: checkout
              uses: actions/checkout@v2

            - name: setup jdk
              uses: actions/setup-java@v2
              with:
                  java-version: '11'
                  distribution: 'adopt'

            - name: set keycloak env variable
              run: echo "KEYCLOAK_VERSION=$(curl -fsS https://registry.hub.docker.com/v2/repositories/jboss/keycloak/tags | jq .results[].name -r | grep -Evi 'beta|test|nightly|latest' | sort -nr | head -n 1)" >> $GITHUB_ENV

            - name: set plugin env variable
              run: echo "PLUGIN_VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

            - name: set keycloak version output
              id: keycloak-version-output
              run: echo "::set-output name=ver::$KEYCLOAK_VERSION"

            - name: set plugin version output
              id: plugin-version-output
              run: echo "::set-output name=ver::$PLUGIN_VERSION"

            - name: run check
              id: run-check
              run: |
                  echo "checking if existing releases"
                  REBUILD=false
                  RELEASE_SIZE=$(curl -fsS -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" $RELEASE_URL | jq "length")
                  if [ "$RELEASE_SIZE" -eq 0 ]; then
                      echo "no releases, rebuilding"
                      REBUILD=true
                  else
                      echo "checking latest versions"
                      RELEASED_VERSION=$(curl -fsS -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" $RELEASE_URL | jq .[].tag_name -r | head -n 1)
                      RELEASED_KEYCLOAK_VERSION=$(echo "$RELEASED_VERSION" | cut -d "-" -f 1)
                      echo "released keycloak $RELEASED_KEYCLOAK_VERSION, published keycloak $KEYCLOAK_VERSION"

                      RELEASED_PLUGIN_VERSION=$(echo "$RELEASED_VERSION" | cut -d "-" -f 2)
                      echo "released plugin $RELEASED_PLUGIN_VERSION, current plugin $PLUGIN_VERSION"

                      if [ "$RELEASED_KEYCLOAK_VERSION" != "$KEYCLOAK_VERSION" ]; then
                            echo "newer keycloak version, rebuilding"
                            REBUILD=true
                      elif [ "$RELEASED_PLUGIN_VERSION" != "$PLUGIN_VERSION" ]; then
                            echo "newer plugin version, rebuilding"
                            REBUILD=true
                      fi
                  fi
                  echo "::set-output name=status::$REBUILD"

    build:
        runs-on: ubuntu-latest
        needs: check
        if: ${{ needs.check.outputs.NEEDS_REBUILD == 'true' }}
        steps:
            - name: set version env variables
              run: |
                  echo "KEYCLOAK_VERSION=${{ needs.check.outputs.KEYCLOAK_VERSION }}" >> $GITHUB_ENV
                  echo "PLUGIN_VERSION=${{ needs.check.outputs.PLUGIN_VERSION }}" >> $GITHUB_ENV

            - name: checkout
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0 # for sonar

            - name: setup jdk
              uses: actions/setup-java@v2
              with:
                  java-version: '11'
                  distribution: 'adopt'

            - name: cache maven
              uses: actions/cache@v2
              with:
                  path: ~/.m2
                  key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
                  restore-keys: ${{ runner.os }}-m2-

            - name: build
              run: mvn --batch-mode --update-snapshots verify

            - name: update pom
              run: sed -i "s#\${env.KEYCLOAK_VERSION}#${KEYCLOAK_VERSION}#g" pom.xml

            - name: archive jar
              uses: actions/upload-artifact@v2
              with:
                  name: dist
                  path: |
                      target/
                      src/
                      pom.xml
                      .git/
                  retention-days: 7

    publish:
        runs-on: ubuntu-latest
        environment: prod
        needs: [check, build]
        if: ${{ needs.check.outputs.NEEDS_REBUILD == 'true' && github.ref == 'refs/heads/main' }}
        permissions:
            contents: write
        steps:
            - name: set version env variables
              run: |
                  echo "KEYCLOAK_VERSION=${{ needs.check.outputs.KEYCLOAK_VERSION }}" >> $GITHUB_ENV
                  echo "PLUGIN_VERSION=${{ needs.check.outputs.PLUGIN_VERSION }}" >> $GITHUB_ENV
                  echo "FULL_VERSION=${{ needs.check.outputs.KEYCLOAK_VERSION }}-${{ needs.check.outputs.PLUGIN_VERSION }}" >> $GITHUB_ENV

            - name: get artifact
              uses: actions/download-artifact@v2
              with:
                  name: dist

            - name: tag code
              run: |
                  curl -fsS -X POST \
                    -H "Accept: application/vnd.github.v3+json" \
                    -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    -d "{\"tag\":\"${FULL_VERSION}\",\"message\":\"action release ${FULL_VERSION}\",\"object\":\"${{ github.sha }}\",\"type\":\"commit\"}" \
                    https://api.github.com/repos/${{ github.repository }}/git/tags >> output.log
                  SHA_VAL=$(cat output.log | jq ".sha" -r)
                  curl -fsS \
                    -X POST \
                    -H "Accept: application/vnd.github.v3+json" \
                    -H "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    -d "{\"ref\":\"refs/tags/${FULL_VERSION}\",\"sha\":\"$SHA_VAL\"}" \
                    https://api.github.com/repos/${{ github.repository }}/git/refs

            - name: create release
              id: create-release
              run: |
                  curl -fsS -X POST \
                    -H "Accept: application/vnd.github.v3+json" \
                    -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    -d "{\"tag_name\":\"${FULL_VERSION}\", \"name\":\"${FULL_VERSION}\", \"body\": \"See https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md\"}" \
                    $RELEASE_URL > output.log
                  BASE_URL=$(cat output.log |  jq '.upload_url' -r | cut -d '{' -f 1)
                  echo "::set-output name=upload-url-base::$BASE_URL"

            - name: upload asset
              run: |
                  FILE_NAME="${FULL_VERSION}.jar"
                  # I'm sure this will never go wrong
                  UPLOAD_URL="${{ steps.create-release.outputs.upload-url-base }}?name=${FILE_NAME}&label=${FILE_NAME}"
                  curl -fsS -X POST \
                    -H "Accept: application/vnd.github.v3+json" \
                    -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Content-Type: application/zip" \
                    --data-binary @"target/${ARTIFACT_NAME}.jar" \
                    "$UPLOAD_URL"
